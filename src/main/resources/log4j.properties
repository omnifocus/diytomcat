log4j.rootLogger=info,stdout,R
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
# %d
    # 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy-MM-dd HH:mm:ss }
    # 输出类似：2002-10-18- 22：10：28
    # a 表示上下午
# %c
    # 输出日志信息所属的类的全名
# %M
    # 打印该日志的方法
# %n
    # 输出一个回车换行符
# %p
    # 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL。如果是调用debug()输出的，则为DEBUG，依此类推
# %m
    # 输出代码中指定的信息，如log(message)中的message
# %l
    # 输出日志事件的发生位置，即输出日志信息的语句处于它所在的类的第几行
# %r
    # 输出自应用启动到输出该日志信息所耗费的毫秒数
# %t
    # 输出产生该日志事件的线程名
log4j.appender.stdout.layout.ConversionPattern=%t:%r  %d{yyyy-MM-dd HH:mm:ss a} %c method:%M line:%l%n%-5p:%m%n
log4j.appender.R=org.apache.log4j.DailyRollingFileAppender
#TODO 直接在项目的根目录里创建了logs目录,此时的catalina还是文件
log4j.appender.R.File=logs/catalina
log4j.appender.R.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.R.layout=org.apache.log4j.PatternLayout
log4j.appender.R.layout.ConversionPattern=%t:%r  %d{yyyy-MM-dd HH:mm:ss a} %c method:%M line:%l%n%-5p:%m%n

